type Category
  @model(subscriptions: { level: off })
  @key(name: "categoryByName", fields: ["name"], queryField: "getCategoryByName")
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      {
        allow: groups
        provider: userPools
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  name: String
  icon: String
  image: S3Object
  description: String
}

type Gym
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: owner, provider: userPools, operations: [read], identityClaim: "sub" }
      {
        allow: groups
        provider: userPools
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  )
  @key(fields: ["id"])
  @searchable {
  id: ID!
  name: String!
  description: String
  address: String
  gps: GPS
  pictures: [String]
  available: Boolean
  status: String
  likeCount: Int
  averageRating: Float
  gymOwnerId: ID
  owner: User @connection(name: "GymOwner")
}

type Activity
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: owner, provider: userPools, operations: [read], identityClaim: "sub" }
      {
        allow: groups
        provider: userPools
        groups: ["Admin", "User"]
        operations: [create, update, delete, read]
      }
    ]
  )
  @key(fields: ["id"]) {
  id: ID!
  title: String!
  description: String
  location: String
  address: String
  gps: GPS
  invitePushSent: Boolean
  startAt: AWSDateTime
  endsAt: AWSDateTime
  activityDate: String!
  pictures: [String]
  available: Boolean
  status: String
  activityOwnerId: ID
  owner: User @connection(name: "ActivityOwner")
}

type Chat
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: owner, provider: userPools, operations: [read], identityClaim: "sub" }
      {
        allow: groups
        provider: userPools
        groups: ["Admin", "User"]
        operations: [create, update, delete, read]
      }
    ]
  )
  @key(fields: ["id"]) {
  id: ID!
  title: String
  description: String
  status: String
  chatOwnerId: ID
  chatReceiverId: ID
  messages: [Message] @connection(name: "ChatMessages")
  receiver: User @connection(name: "ChatReceiver")
  owner: User @connection(name: "ChatOwner")
}

type Message
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: owner, provider: userPools, operations: [read], identityClaim: "sub" }
      {
        allow: groups
        provider: userPools
        groups: ["Admin", "User"]
        operations: [create, update, delete, read]
      }
    ]
  )
  @key(fields: ["id"]) {
  id: ID!
  message: String
  status: String
  messageOwnerId: ID
  messageChatId: ID
  chat: Chat @connection(name: "ChatMessages")
  owner: User @connection(name: "MessageOwner")
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}
type GPS {
  lon: Float
  lat: Float
}

input GPSInput {
  lon: Float!
  lat: Float!
}
input GPSQueryInput {
  gps: GPSInput!
  radius: Float!
}

type Notification
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      {
        allow: groups
        provider: userPools
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  )
  @key(
    name: "notificationsByEndpoint"
    fields: ["endpointArn"]
    queryField: "getNotificationsByEndpoint"
  ) {
  id: ID!
  message: String
  endpointArn: String!
  subject: String
  notificationOwnerId: ID
  owner: User @connection(name: "NotificationOwner")
}

type Bulletin
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [create, update, delete, read] }
      {
        allow: owner
        provider: userPools
        operations: [create, update, delete, read]
        identityClaim: "sub"
      }
      {
        allow: groups
        provider: userPools
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  title: String!
  description: String!
  category: String
  photos: [String]
  bulletinOwnerId: ID!
  eventDate: String!
  owner: User @connection(name: "UserBulletin")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Setting
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [create, update, delete, read] }
      {
        allow: owner
        provider: userPools
        operations: [create, update, delete, read]
        identityClaim: "sub"
      }
      {
        allow: groups
        provider: userPools
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  ) {
  id: ID!
  categories: [String]
  radius: Float
  icon: String
  settingOwnerId: ID!
  owner: User @connection(name: "UserSetting")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User
  @model(subscriptions: { level: off })
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      {
        allow: owner
        provider: userPools
        ownerField: "id"
        identityClaim: "sub"
        operations: [create, update, delete, read]
      }
      {
        allow: groups
        provider: userPools
        groups: ["Admin"]
        operations: [create, update, delete, read]
      }
    ]
  )
  @key(name: "userByEmail", fields: ["email"], queryField: "getUserByEmail")
  @key(fields: ["id"])
  @searchable {
  id: ID!
  owner: String
  userGroup: UserType
  name: String!
  age: String
  city: String
  state: String
  description: String
  business: String
  deviceId: String
  deviceToken: String
  platform: String
  stripeCustomerId: String
  stripeSubscription: String
  stripeSubscriptionId: String
  endpointArn: String
  email: String!
  username: String
  birthdate: String
  gender: String
  address: String
  phone: String
  status: Boolean
  premium: Boolean
  trainer: Boolean
  gps: GPS
  photo: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  userSettingId: ID!
  userSuscriptionId: ID
  setting: Setting @connection(name: "UserSetting")
  gyms: [Gym] @connection(name: "GymOwner")
  notification: [Notification] @connection(name: "NotificationOwner")
  bulletin: [Bulletin] @connection(name: "UserBulletin")
  activity: [Activity] @connection(name: "ActivityOwner")
  chat: [Chat] @connection(name: "ChatOwner")
  chatReceiver: [Chat] @connection(name: "ChatReceiver")
  messages: [Message] @connection(name: "MessageOwner")
}

enum UserType {
  User
  Business
}

type ModelUserConnection {
  items: [User]
  nextToken: String
  scannedCount: Int
  count: Int
}

type ModelBulletinConnection {
  items: [Bulletin]
  nextToken: String
  scannedCount: Int
  count: Int
}
type ModelSettingConnection {
  items: [Setting]
  nextToken: String
  scannedCount: Int
  count: Int
}
type ModelNotificationConnection {
  items: [Notification]
  nextToken: String
  scannedCount: Int
  count: Int
}

type Mutation {
  enableDisableUsers(user: String): String @function(name: "enableDisableUsers-${env}")
  registerEndpointArnNotification(body: UserPushRegisterInput): String
    @function(name: "createEndpointNotifications-${env}")
  deleteEndpointArnNotification(body: UserPushDeleteInput): String
    @function(name: "deleteEndpointNotifications-${env}")
  publishNotification(body: PublishNotificationInput): String
    @function(name: "publishNotification-${env}")
}
input UserPushRegisterInput {
  userId: String
  platform: String
  deviceId: String
}
input UserPushDeleteInput {
  endpointArn: String
  userId: String
}

input PublishNotificationInput {
  message: String
  endpointArn: String
  subject: String
}

type Query {
  findGyms(input: FindGymsInput!): SearchableGymConnection @aws_iam @aws_cognito_user_pools
  findUsers(input: FindUsersInput!): SearchableUserConnection @aws_iam @aws_cognito_user_pools
}

input FindUsersInput {
  byGPS: GPSQueryInput
  query: String
  limit: Int
  nextToken: String
  from: Int
}

type SearchableUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]
  nextToken: String
  total: Int
  scannedCount: Int
  count: Int
}
input FindGymsInput {
  byGPS: GPSQueryInput
  query: String
  limit: Int
  nextToken: String
  from: Int
}

type SearchableGymConnection @aws_iam @aws_cognito_user_pools {
  items: [Gym]
  nextToken: String
  total: Int
  scannedCount: Int
  count: Int
}
